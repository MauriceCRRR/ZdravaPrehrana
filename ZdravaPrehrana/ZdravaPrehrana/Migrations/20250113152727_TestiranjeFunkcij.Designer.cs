// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZdravaPrehrana.Data;

#nullable disable

namespace ZdravaPrehrana.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250113152727_TestiranjeFunkcij")]
    partial class TestiranjeFunkcij
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("JedilnikUporabnik", b =>
                {
                    b.Property<int>("DeliZId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("JedilnikId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DeliZId", "JedilnikId");

                    b.HasIndex("JedilnikId");

                    b.ToTable("DeljeniJedilniki", (string)null);
                });

            modelBuilder.Entity("ObrokRecept", b =>
                {
                    b.Property<int>("ObrokiId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReceptiId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ObrokiId", "ReceptiId");

                    b.HasIndex("ReceptiId");

                    b.ToTable("ReceptiObroki", (string)null);
                });

            modelBuilder.Entity("ZdravaPrehrana.Entitete.Jedilnik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DatumDeljenja")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("TEXT");

                    b.Property<bool>("JeDeljiv")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UporabnikId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UporabnikId");

                    b.ToTable("Jedilniki");
                });

            modelBuilder.Entity("ZdravaPrehrana.Entitete.JedilnikOcena", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DatumOcene")
                        .HasColumnType("TEXT");

                    b.Property<int>("JedilnikId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Komentar")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("UporabnikId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Vrednost")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("JedilnikId");

                    b.HasIndex("UporabnikId");

                    b.ToTable("JedilnikOcene");
                });

            modelBuilder.Entity("ZdravaPrehrana.Entitete.NakupovalniSeznam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("TEXT");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UporabnikId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UporabnikId");

                    b.ToTable("NakupovalniSeznami");
                });

            modelBuilder.Entity("ZdravaPrehrana.Entitete.Nasvet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DatumOdgovora")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DatumVprasanja")
                        .HasColumnType("TEXT");

                    b.Property<string>("Odgovor")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StrokovnjakId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UporabnikId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Vprasanje")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StrokovnjakId");

                    b.HasIndex("UporabnikId");

                    b.ToTable("Nasveti");
                });

            modelBuilder.Entity("ZdravaPrehrana.Entitete.Obrok", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Cas")
                        .HasColumnType("TEXT");

                    b.Property<int>("JedilnikId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("JedilnikId");

                    b.ToTable("Obroki");
                });

            modelBuilder.Entity("ZdravaPrehrana.Entitete.Ocena", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DatumOcene")
                        .HasColumnType("TEXT");

                    b.Property<string>("Komentar")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("ReceptId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UporabnikId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Vrednost")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ReceptId");

                    b.HasIndex("UporabnikId");

                    b.ToTable("Ocene");
                });

            modelBuilder.Entity("ZdravaPrehrana.Entitete.PrehranskiCilji", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("BMR")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CasovniOkvir")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CiljnaTeza")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DnevneKalorije")
                        .HasColumnType("INTEGER");

                    b.Property<double>("TDEE")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("TedenIzgubaKg")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UporabnikId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UporabnikId");

                    b.ToTable("PrehranskiCilji");
                });

            modelBuilder.Entity("ZdravaPrehrana.Entitete.Recept", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AvtorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CasPriprave")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DatumUstvarjanja")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTime(2025, 1, 13, 16, 27, 26, 990, DateTimeKind.Local).AddTicks(1719));

                    b.Property<bool>("JeJaven")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int?>("JedilnikId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Kalorije")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Postopek")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AvtorId");

                    b.HasIndex("JedilnikId");

                    b.ToTable("Recepti");
                });

            modelBuilder.Entity("ZdravaPrehrana.Entitete.ReceptSestavina", b =>
                {
                    b.Property<int>("ReceptId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SestavinaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Enota")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Kolicina")
                        .HasColumnType("REAL");

                    b.HasKey("ReceptId", "SestavinaId");

                    b.HasIndex("SestavinaId");

                    b.ToTable("ReceptSestavine");
                });

            modelBuilder.Entity("ZdravaPrehrana.Entitete.Sestavina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Beljakovine")
                        .HasColumnType("REAL");

                    b.Property<double>("Kalorije")
                        .HasColumnType("REAL");

                    b.Property<double>("Mascobe")
                        .HasColumnType("REAL");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("OgljikoviHidrati")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Sestavine");
                });

            modelBuilder.Entity("ZdravaPrehrana.Entitete.SeznamPostavka", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Enota")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("JeObkljukana")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Kolicina")
                        .HasColumnType("REAL");

                    b.Property<int>("NakupovalniSeznamId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NakupovalniSeznamId");

                    b.ToTable("SeznamPostavke");
                });

            modelBuilder.Entity("ZdravaPrehrana.Entitete.Uporabnik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Geslo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UporabniskoIme")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Vloga")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Uporabniki");
                });

            modelBuilder.Entity("ZdravaPrehrana.Entitete.UporabnikProfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AlergijeJson")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Alergije");

                    b.Property<string>("OmejitveJson")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Omejitve");

                    b.Property<double>("Teza")
                        .HasColumnType("REAL");

                    b.Property<int>("UporabnikId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Visina")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("UporabnikId")
                        .IsUnique();

                    b.ToTable("Profili");
                });

            modelBuilder.Entity("ZdravaPrehrana.Entitete.VnosHranil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Beljakovine")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("TEXT");

                    b.Property<int>("Kalorije")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("Mascobe")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("OgljikoviHidrati")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UporabnikId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UporabnikId");

                    b.ToTable("VnosiHranil");
                });

            modelBuilder.Entity("JedilnikUporabnik", b =>
                {
                    b.HasOne("ZdravaPrehrana.Entitete.Uporabnik", null)
                        .WithMany()
                        .HasForeignKey("DeliZId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZdravaPrehrana.Entitete.Jedilnik", null)
                        .WithMany()
                        .HasForeignKey("JedilnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ObrokRecept", b =>
                {
                    b.HasOne("ZdravaPrehrana.Entitete.Obrok", null)
                        .WithMany()
                        .HasForeignKey("ObrokiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZdravaPrehrana.Entitete.Recept", null)
                        .WithMany()
                        .HasForeignKey("ReceptiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ZdravaPrehrana.Entitete.Jedilnik", b =>
                {
                    b.HasOne("ZdravaPrehrana.Entitete.Uporabnik", "Uporabnik")
                        .WithMany("Jedilniki")
                        .HasForeignKey("UporabnikId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Uporabnik");
                });

            modelBuilder.Entity("ZdravaPrehrana.Entitete.JedilnikOcena", b =>
                {
                    b.HasOne("ZdravaPrehrana.Entitete.Jedilnik", "Jedilnik")
                        .WithMany("Ocene")
                        .HasForeignKey("JedilnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZdravaPrehrana.Entitete.Uporabnik", "Uporabnik")
                        .WithMany()
                        .HasForeignKey("UporabnikId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Jedilnik");

                    b.Navigation("Uporabnik");
                });

            modelBuilder.Entity("ZdravaPrehrana.Entitete.NakupovalniSeznam", b =>
                {
                    b.HasOne("ZdravaPrehrana.Entitete.Uporabnik", "Uporabnik")
                        .WithMany("NakupovalniSeznami")
                        .HasForeignKey("UporabnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Uporabnik");
                });

            modelBuilder.Entity("ZdravaPrehrana.Entitete.Nasvet", b =>
                {
                    b.HasOne("ZdravaPrehrana.Entitete.Uporabnik", "Strokovnjak")
                        .WithMany()
                        .HasForeignKey("StrokovnjakId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ZdravaPrehrana.Entitete.Uporabnik", "Uporabnik")
                        .WithMany("PrejetiNasveti")
                        .HasForeignKey("UporabnikId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Strokovnjak");

                    b.Navigation("Uporabnik");
                });

            modelBuilder.Entity("ZdravaPrehrana.Entitete.Obrok", b =>
                {
                    b.HasOne("ZdravaPrehrana.Entitete.Jedilnik", "Jedilnik")
                        .WithMany("Obroki")
                        .HasForeignKey("JedilnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jedilnik");
                });

            modelBuilder.Entity("ZdravaPrehrana.Entitete.Ocena", b =>
                {
                    b.HasOne("ZdravaPrehrana.Entitete.Recept", "Recept")
                        .WithMany("Ocene")
                        .HasForeignKey("ReceptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZdravaPrehrana.Entitete.Uporabnik", "Uporabnik")
                        .WithMany("Ocene")
                        .HasForeignKey("UporabnikId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recept");

                    b.Navigation("Uporabnik");
                });

            modelBuilder.Entity("ZdravaPrehrana.Entitete.PrehranskiCilji", b =>
                {
                    b.HasOne("ZdravaPrehrana.Entitete.Uporabnik", "Uporabnik")
                        .WithMany("PrehranskiCilji")
                        .HasForeignKey("UporabnikId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Uporabnik");
                });

            modelBuilder.Entity("ZdravaPrehrana.Entitete.Recept", b =>
                {
                    b.HasOne("ZdravaPrehrana.Entitete.Uporabnik", "Avtor")
                        .WithMany("UstvarjeniRecepti")
                        .HasForeignKey("AvtorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ZdravaPrehrana.Entitete.Jedilnik", "Jedilnik")
                        .WithMany("Recepti")
                        .HasForeignKey("JedilnikId");

                    b.Navigation("Avtor");

                    b.Navigation("Jedilnik");
                });

            modelBuilder.Entity("ZdravaPrehrana.Entitete.ReceptSestavina", b =>
                {
                    b.HasOne("ZdravaPrehrana.Entitete.Recept", "Recept")
                        .WithMany("ReceptSestavine")
                        .HasForeignKey("ReceptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZdravaPrehrana.Entitete.Sestavina", "Sestavina")
                        .WithMany("ReceptSestavine")
                        .HasForeignKey("SestavinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recept");

                    b.Navigation("Sestavina");
                });

            modelBuilder.Entity("ZdravaPrehrana.Entitete.SeznamPostavka", b =>
                {
                    b.HasOne("ZdravaPrehrana.Entitete.NakupovalniSeznam", "NakupovalniSeznam")
                        .WithMany("Postavke")
                        .HasForeignKey("NakupovalniSeznamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NakupovalniSeznam");
                });

            modelBuilder.Entity("ZdravaPrehrana.Entitete.UporabnikProfil", b =>
                {
                    b.HasOne("ZdravaPrehrana.Entitete.Uporabnik", "Uporabnik")
                        .WithOne("Profil")
                        .HasForeignKey("ZdravaPrehrana.Entitete.UporabnikProfil", "UporabnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Uporabnik");
                });

            modelBuilder.Entity("ZdravaPrehrana.Entitete.VnosHranil", b =>
                {
                    b.HasOne("ZdravaPrehrana.Entitete.Uporabnik", "Uporabnik")
                        .WithMany("VnosiHranil")
                        .HasForeignKey("UporabnikId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Uporabnik");
                });

            modelBuilder.Entity("ZdravaPrehrana.Entitete.Jedilnik", b =>
                {
                    b.Navigation("Obroki");

                    b.Navigation("Ocene");

                    b.Navigation("Recepti");
                });

            modelBuilder.Entity("ZdravaPrehrana.Entitete.NakupovalniSeznam", b =>
                {
                    b.Navigation("Postavke");
                });

            modelBuilder.Entity("ZdravaPrehrana.Entitete.Recept", b =>
                {
                    b.Navigation("Ocene");

                    b.Navigation("ReceptSestavine");
                });

            modelBuilder.Entity("ZdravaPrehrana.Entitete.Sestavina", b =>
                {
                    b.Navigation("ReceptSestavine");
                });

            modelBuilder.Entity("ZdravaPrehrana.Entitete.Uporabnik", b =>
                {
                    b.Navigation("Jedilniki");

                    b.Navigation("NakupovalniSeznami");

                    b.Navigation("Ocene");

                    b.Navigation("PrehranskiCilji");

                    b.Navigation("PrejetiNasveti");

                    b.Navigation("Profil")
                        .IsRequired();

                    b.Navigation("UstvarjeniRecepti");

                    b.Navigation("VnosiHranil");
                });
#pragma warning restore 612, 618
        }
    }
}
